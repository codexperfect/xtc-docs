{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Xtended Content is a Drupal module that provides access to external content from Drupal 8. Main modules Xtended Content : API module Xtended Content Elastica Xtended Content File Xtended Content Guzzle Xtended Content Search Architecture Helpers Many Helper functions can be found in the XtendedContent/API directory in xtc module. Plugins 10 plugins managers are defined throughout the XTC modules. Yaml plugins are used when the Default class is mostly used, and plugins are data driven. Annotation plugins are used when plugins are code driven. Contributing new modules lorem...","title":"Home"},{"location":"#about","text":"Xtended Content is a Drupal module that provides access to external content from Drupal 8.","title":"About"},{"location":"#main-modules","text":"Xtended Content : API module Xtended Content Elastica Xtended Content File Xtended Content Guzzle Xtended Content Search","title":"Main modules"},{"location":"#architecture","text":"","title":"Architecture"},{"location":"#helpers","text":"Many Helper functions can be found in the XtendedContent/API directory in xtc module.","title":"Helpers"},{"location":"#plugins","text":"10 plugins managers are defined throughout the XTC modules. Yaml plugins are used when the Default class is mostly used, and plugins are data driven. Annotation plugins are used when plugins are code driven.","title":"Plugins"},{"location":"#contributing-new-modules","text":"lorem...","title":"Contributing new modules"},{"location":"modules/xtc/","text":"Xtended Content (xtc)","title":"Xtended Content"},{"location":"modules/xtcfile/","text":"XTC File","title":"Xtended Content File"},{"location":"plugins/plugins-by-modules/","text":"Plugins by modules 10 plugins managers are defined throughout the XTC modules: xtc module 4 plugin managers are defined in xtc . xtc_handler xtc_profile xtc_request xtc_server xtcelastica module 1 plugin manager is defined in xtcelastica . xtcelastica_mapping xtcfile module No plugin manager is defined in xtcfile . xtcguzzle module No plugin manager is defined in xtcguzzle . xtcsearch module 5 plugin managers are defined in xtcsearch . xtcsearch xtcsearch_display xtcsearch_filter xtcsearch_filter_type xtcsearch_pager","title":"Plugins by modules"},{"location":"plugins/plugins-by-modules/#plugins-by-modules","text":"10 plugins managers are defined throughout the XTC modules:","title":"Plugins by modules"},{"location":"plugins/plugins-by-modules/#xtc-module","text":"4 plugin managers are defined in xtc . xtc_handler xtc_profile xtc_request xtc_server","title":"xtc module"},{"location":"plugins/plugins-by-modules/#xtcelastica-module","text":"1 plugin manager is defined in xtcelastica . xtcelastica_mapping","title":"xtcelastica module"},{"location":"plugins/plugins-by-modules/#xtcfile-module","text":"No plugin manager is defined in xtcfile .","title":"xtcfile module"},{"location":"plugins/plugins-by-modules/#xtcguzzle-module","text":"No plugin manager is defined in xtcguzzle .","title":"xtcguzzle module"},{"location":"plugins/plugins-by-modules/#xtcsearch-module","text":"5 plugin managers are defined in xtcsearch . xtcsearch xtcsearch_display xtcsearch_filter xtcsearch_filter_type xtcsearch_pager","title":"xtcsearch module"},{"location":"plugins/xtc-plugins/","text":"XTC Plugins 4 plugin managers are defined in xtc . xtc_handler plugin manager Service: plugin.manager.xtc_handler 8 plugins are provided by xtcfile : csv html json markdown mkdocs readme text yaml xtc_profile plugin manager Service: plugin.manager.xtc_profile 4 disabled plugins examples are provided by xtcelastica in xtcelastica.xtc_profiles.yml.dist : account-by-id known-doc index-doc unindex-doc 6 disabled plugins examples are provided by xtcfile in xtcfile.xtc_profiles.yml.dist : test_text test_html test_csv test_yaml test_json test_md As a complement, xtcfile module implements dynamic profiles to provide: In-line Readme files in the Drupal administration area: used for all existing modules. In-line Documentation based on MkDocs standards: used in the xtc module. A API function that can be used to write the module Help page in a help/help.md file: used in every xtc modules. xtc_request plugin manager Service: plugin.manager.xtc_request These requests are consumed by XtcRequest* + Client* : this approach uses directly raw elasticsearch library. It is now deprecated. xtcsearch approach (using object elastica library) should be privileged. xtc_server plugin manager Service: plugin.manager.xtc_server 1 disabled plugin example is provided by xtcelastica in xtcelastica.xtc_servers.yml.dist . This plugin helps to describe a server that can be used by other plugins such as xtcelastica , xtcguzzle or xtcsearch .","title":"XTC plugins"},{"location":"plugins/xtc-plugins/#xtc-plugins","text":"4 plugin managers are defined in xtc .","title":"XTC Plugins"},{"location":"plugins/xtc-plugins/#xtc_handler-plugin-manager","text":"Service: plugin.manager.xtc_handler 8 plugins are provided by xtcfile : csv html json markdown mkdocs readme text yaml","title":"xtc_handler plugin manager"},{"location":"plugins/xtc-plugins/#xtc_profile-plugin-manager","text":"Service: plugin.manager.xtc_profile 4 disabled plugins examples are provided by xtcelastica in xtcelastica.xtc_profiles.yml.dist : account-by-id known-doc index-doc unindex-doc 6 disabled plugins examples are provided by xtcfile in xtcfile.xtc_profiles.yml.dist : test_text test_html test_csv test_yaml test_json test_md As a complement, xtcfile module implements dynamic profiles to provide: In-line Readme files in the Drupal administration area: used for all existing modules. In-line Documentation based on MkDocs standards: used in the xtc module. A API function that can be used to write the module Help page in a help/help.md file: used in every xtc modules.","title":"xtc_profile plugin manager"},{"location":"plugins/xtc-plugins/#xtc_request-plugin-manager","text":"Service: plugin.manager.xtc_request These requests are consumed by XtcRequest* + Client* : this approach uses directly raw elasticsearch library. It is now deprecated. xtcsearch approach (using object elastica library) should be privileged.","title":"xtc_request plugin manager"},{"location":"plugins/xtc-plugins/#xtc_server-plugin-manager","text":"Service: plugin.manager.xtc_server 1 disabled plugin example is provided by xtcelastica in xtcelastica.xtc_servers.yml.dist . This plugin helps to describe a server that can be used by other plugins such as xtcelastica , xtcguzzle or xtcsearch .","title":"xtc_server plugin manager"},{"location":"plugins/xtcelastica-plugins/","text":"XTC Elastica Plugins 1 plugin manager is defined in xtcelastica . xtcelastica_mapping Service: plugin.manager.xtcelastica_mapping","title":"XTC Elastica plugins"},{"location":"plugins/xtcelastica-plugins/#xtc-elastica-plugins","text":"1 plugin manager is defined in xtcelastica .","title":"XTC Elastica Plugins"},{"location":"plugins/xtcelastica-plugins/#xtcelastica_mapping","text":"Service: plugin.manager.xtcelastica_mapping","title":"xtcelastica_mapping"},{"location":"plugins/xtcfile-plugins/","text":"XTC File Plugins No plugin manager is defined in xtcfile .","title":"XTC File plugins"},{"location":"plugins/xtcfile-plugins/#xtc-file-plugins","text":"No plugin manager is defined in xtcfile .","title":"XTC File Plugins"},{"location":"plugins/xtcguzzle-plugins/","text":"XTC Guzzle Plugins No plugin manager is defined in xtcguzzle .","title":"XTC Guzzle plugins"},{"location":"plugins/xtcguzzle-plugins/#xtc-guzzle-plugins","text":"No plugin manager is defined in xtcguzzle .","title":"XTC Guzzle Plugins"},{"location":"plugins/xtcsearch-plugins/","text":"XTC Search Plugins 5 plugin managers are defined in xtcsearch . xtcsearch Service: plugin.manager.xtcsearch 1 disabled plugin example is provided by xtcelastica in xtcelastica.xtc_searchs.yml.dist : xtc_search xtcsearch_display Service: plugin.manager.xtcsearch_display 3 plugins are provided by xtcsearch in xtcsearch.xtcsearch_displays.yml : autocomplete xtc_block: an XtcSearchBlockBase plugin is provided to help build XTC Search blocks. xtc_page xtcsearch_filter Service: plugin.manager.xtcsearch_filter xtcsearch_filter_type Service: plugin.manager.xtcsearch_filter_type 12 plugins are provided by xtcsearch : select checkbox fullltext autocomplete exclude checkbox_and iterativeCheckbox comingEvents range dateSelect dateRange thisMonth xtcsearch_pager Service: plugin.manager.xtcsearch_pager 3 plugins are provided by xtcsearch : page more: using Masonry style nopager","title":"XTC Search plugins"},{"location":"plugins/xtcsearch-plugins/#xtc-search-plugins","text":"5 plugin managers are defined in xtcsearch .","title":"XTC Search Plugins"},{"location":"plugins/xtcsearch-plugins/#xtcsearch","text":"Service: plugin.manager.xtcsearch 1 disabled plugin example is provided by xtcelastica in xtcelastica.xtc_searchs.yml.dist : xtc_search","title":"xtcsearch"},{"location":"plugins/xtcsearch-plugins/#xtcsearch_display","text":"Service: plugin.manager.xtcsearch_display 3 plugins are provided by xtcsearch in xtcsearch.xtcsearch_displays.yml : autocomplete xtc_block: an XtcSearchBlockBase plugin is provided to help build XTC Search blocks. xtc_page","title":"xtcsearch_display"},{"location":"plugins/xtcsearch-plugins/#xtcsearch_filter","text":"Service: plugin.manager.xtcsearch_filter","title":"xtcsearch_filter"},{"location":"plugins/xtcsearch-plugins/#xtcsearch_filter_type","text":"Service: plugin.manager.xtcsearch_filter_type 12 plugins are provided by xtcsearch : select checkbox fullltext autocomplete exclude checkbox_and iterativeCheckbox comingEvents range dateSelect dateRange thisMonth","title":"xtcsearch_filter_type"},{"location":"plugins/xtcsearch-plugins/#xtcsearch_pager","text":"Service: plugin.manager.xtcsearch_pager 3 plugins are provided by xtcsearch : page more: using Masonry style nopager","title":"xtcsearch_pager"},{"location":"tutorials/elastica-profile/","text":"Elastica profile Loading an Elastica profile To load an Elasticsearch client as a service, simply provide the profile name, the helper static function Config::getXtcRequestFromProfile() from \\Drupal\\xtc\\XtendedContent\\API\\Config . public static function getXtcRequestFromProfile($name){ $profile = \\Drupal::service( plugin.manager.xtc_profile ) - getDefinition($name) ; $xtcrequest = (New $profile[ service ]($name)); if($xtcrequest instanceof AbstractXtcRequest){ $xtcrequest- setConfigfromPlugins(); } return $xtcrequest; } To load a content, here an example of code: $results = $this- getESHits(Config::getXtcRequestFromProfile($name), $uri); Where: protected function getESHits(XtcRequestInterface $service, $uri = ){ $method = $service- getWebservice()[ method ]; $service- get($method, $uri); if(!empty($results = $service- getData( array )) ){ return $results; } return []; } Plugin definition This is a Drupal 8 YAML plugin. Yaml file The profiles can be defined in a YAML file that follows this pattern: [module_name].xtc_profiles.yml . The plugin is defined in the Xtended Content ( xtc ) module: xtc/src/PluginManager/XtcProfile/XtcProfilePluginManager.php . Structure A File profile definition looks lake this: article : label : Article description : type : elastica server : csoec-es request : contenu-by-id service : Drupal\\xtcelastica\\XtendedContent\\Serve\\XtcRequest\\GetElasticaXtcRequest Default values can be provided thanks to args : article : label : Article description : type : elastica server : csoec-es request : contenu-by-id service : Drupal\\xtcelastica\\XtendedContent\\Serve\\XtcRequest\\GetElasticaXtcRequest args : category : News label (string) and description (string) are mandatory for any Drupal 8 plugin definition. Handler type type (string) Always use elastica . Server server (string) Provide the name of the XTC server plugin to use. Request request (string) Provide the name of the XTC request plugin to use. Service service (string) Provide the name of the XtcRequest class to build the Elasticsearch Client. Arguments args (array) Array of default values that can be pass to the request plugin. Extending available XtcRequest services list Any new XtcRequest service should be based on \\Drupal\\xtcelastica\\XtendedContent\\Serve\\XtcRequest\\AbstractElasticaXtcRequest . Example from the GetElasticaXtcRequest type: namespace Drupal\\xtcelastica\\XtendedContent\\Serve\\XtcRequest; use Drupal\\xtcelastica\\XtendedContent\\Serve\\Client\\GetElasticaClient; class GetElasticaXtcRequest extends AbstractElasticaXtcRequest { /** * @return \\Drupal\\xtcelastica\\XtendedContent\\Serve\\Client\\AbstractElasticaClient */ protected function getElasticaClient(){ return New GetElasticaClient($this- profile); } }","title":"Elastica profile"},{"location":"tutorials/elastica-profile/#elastica-profile","text":"","title":"Elastica profile"},{"location":"tutorials/elastica-profile/#loading-an-elastica-profile","text":"To load an Elasticsearch client as a service, simply provide the profile name, the helper static function Config::getXtcRequestFromProfile() from \\Drupal\\xtc\\XtendedContent\\API\\Config . public static function getXtcRequestFromProfile($name){ $profile = \\Drupal::service( plugin.manager.xtc_profile ) - getDefinition($name) ; $xtcrequest = (New $profile[ service ]($name)); if($xtcrequest instanceof AbstractXtcRequest){ $xtcrequest- setConfigfromPlugins(); } return $xtcrequest; } To load a content, here an example of code: $results = $this- getESHits(Config::getXtcRequestFromProfile($name), $uri); Where: protected function getESHits(XtcRequestInterface $service, $uri = ){ $method = $service- getWebservice()[ method ]; $service- get($method, $uri); if(!empty($results = $service- getData( array )) ){ return $results; } return []; }","title":"Loading an Elastica profile"},{"location":"tutorials/elastica-profile/#plugin-definition","text":"This is a Drupal 8 YAML plugin.","title":"Plugin definition"},{"location":"tutorials/elastica-profile/#yaml-file","text":"The profiles can be defined in a YAML file that follows this pattern: [module_name].xtc_profiles.yml . The plugin is defined in the Xtended Content ( xtc ) module: xtc/src/PluginManager/XtcProfile/XtcProfilePluginManager.php .","title":"Yaml file"},{"location":"tutorials/elastica-profile/#structure","text":"A File profile definition looks lake this: article : label : Article description : type : elastica server : csoec-es request : contenu-by-id service : Drupal\\xtcelastica\\XtendedContent\\Serve\\XtcRequest\\GetElasticaXtcRequest Default values can be provided thanks to args : article : label : Article description : type : elastica server : csoec-es request : contenu-by-id service : Drupal\\xtcelastica\\XtendedContent\\Serve\\XtcRequest\\GetElasticaXtcRequest args : category : News label (string) and description (string) are mandatory for any Drupal 8 plugin definition.","title":"Structure"},{"location":"tutorials/elastica-profile/#handler-type-type-string","text":"Always use elastica .","title":"Handler type type (string)"},{"location":"tutorials/elastica-profile/#server-server-string","text":"Provide the name of the XTC server plugin to use.","title":"Server server (string)"},{"location":"tutorials/elastica-profile/#request-request-string","text":"Provide the name of the XTC request plugin to use.","title":"Request request (string)"},{"location":"tutorials/elastica-profile/#service-service-string","text":"Provide the name of the XtcRequest class to build the Elasticsearch Client.","title":"Service service (string)"},{"location":"tutorials/elastica-profile/#arguments-args-array","text":"Array of default values that can be pass to the request plugin.","title":"Arguments args (array)"},{"location":"tutorials/elastica-profile/#extending-available-xtcrequest-services-list","text":"Any new XtcRequest service should be based on \\Drupal\\xtcelastica\\XtendedContent\\Serve\\XtcRequest\\AbstractElasticaXtcRequest . Example from the GetElasticaXtcRequest type: namespace Drupal\\xtcelastica\\XtendedContent\\Serve\\XtcRequest; use Drupal\\xtcelastica\\XtendedContent\\Serve\\Client\\GetElasticaClient; class GetElasticaXtcRequest extends AbstractElasticaXtcRequest { /** * @return \\Drupal\\xtcelastica\\XtendedContent\\Serve\\Client\\AbstractElasticaClient */ protected function getElasticaClient(){ return New GetElasticaClient($this- profile); } }","title":"Extending available XtcRequest services list"},{"location":"tutorials/file-profile/","text":"File profile Loading a File profile To load a content, simply provide the profile name to the getFile() static function from the helper class \\Drupal\\xtc\\XtendedContent\\API\\Config . $content = \\Drupal\\xtc\\XtendedContent\\API\\Config::getFile( test_text ); Plugin definition This is a Drupal 8 YAML plugin. Yaml file The profiles can be defined in a YAML file that follows this pattern: [module_name].xtc_profiles.yml . The plugin is defined in the Xtended Content ( xtc ) module: xtc/src/PluginManager/XtcProfile/XtcProfilePluginManager.php . Structure A File profile definition looks lake this: test_text : label : Text file description : type : text abs_path : false module : xtcfile path : example/demo.txt label (string) and description (string) are mandatory for any Drupal 8 plugin definition. Handler type type (string) Available types provided by the XTC File are: Csv csv : use LoadCsv class (based on https://github.com/parsecsv/parsecsv-for-php ) to load Comma-Separated Values files. Html html : load HTML file. Json json : load Json file through Drupal Json serializer. Markdown md : use LaodMarkdown class (using erusev/parsedown , https://github.com/erusev/parsedown ) to load Markdown content. Text text : load plain Text file. Yaml yaml : load Yaml file through Drupal Yaml serializer. Dynamic handlers Two dynamic handlers are provided for Documentation: MkDocs mkdocs : provide a light API to display MkDocs ( https://www.mkdocs.org/ ) based documentation in the administration area. Readme readme : extends Markdown type to provide display modules Readme files in the administration area. getDocs() static function from \\Drupal\\xtc\\XtendedContent\\API\\Config provides an example for dynamics handlers: public static function getDocs($module){ $profile = [ type = mkdocs , abs_path = false, module = $module, path = help/mkdocs.yml , ]; $content = self::getFromProfile($profile); if(!empty($content) is_array($content)) { return $content; } return h2 Documentation needs to be created. /h2 p Documentation follows b a href= https://www.mkdocs.org/ target= _blank mkdocs /a /b standards. /p ; } Config::getFromProfile() needs to be used in that case. This function directly trigger a get() ; public static function getFromProfile($profile){ return self::getHandler($profile[ type ]) - setProfile($profile) - setOptions() - get(); ; } If for any reason, an action needs to be done before the get(), the Config::getHandlerFromProfile() can be prefered: public static function getHandlerFromProfile($profile){ return self::getHandler($profile[ type ]) - setProfile($profile) - setOptions(); ; } Absolute path abs_path (boolean) Whether the provided path is absolute or local. Module module (string) Module machinename where the file is expected to be found. Path path (string) Path from the module root directory. Extending types list Any new File type handler should be based on \\Drupal\\xtcfile\\Plugin\\XtcHandler\\FileBase . Example from the Text type: namespace Drupal\\xtcfile\\Plugin\\XtcHandler; /** * Plugin implementation of the xtc_handler. * * @XtcHandler( * id = text , * label = @Translation( Text File for XTC ), * description = @Translation( Text File for XTC description. ) * ) */ class Text extends FileBase { }","title":"File profile"},{"location":"tutorials/file-profile/#file-profile","text":"","title":"File profile"},{"location":"tutorials/file-profile/#loading-a-file-profile","text":"To load a content, simply provide the profile name to the getFile() static function from the helper class \\Drupal\\xtc\\XtendedContent\\API\\Config . $content = \\Drupal\\xtc\\XtendedContent\\API\\Config::getFile( test_text );","title":"Loading a File profile"},{"location":"tutorials/file-profile/#plugin-definition","text":"This is a Drupal 8 YAML plugin.","title":"Plugin definition"},{"location":"tutorials/file-profile/#yaml-file","text":"The profiles can be defined in a YAML file that follows this pattern: [module_name].xtc_profiles.yml . The plugin is defined in the Xtended Content ( xtc ) module: xtc/src/PluginManager/XtcProfile/XtcProfilePluginManager.php .","title":"Yaml file"},{"location":"tutorials/file-profile/#structure","text":"A File profile definition looks lake this: test_text : label : Text file description : type : text abs_path : false module : xtcfile path : example/demo.txt label (string) and description (string) are mandatory for any Drupal 8 plugin definition.","title":"Structure"},{"location":"tutorials/file-profile/#handler-type-type-string","text":"Available types provided by the XTC File are: Csv csv : use LoadCsv class (based on https://github.com/parsecsv/parsecsv-for-php ) to load Comma-Separated Values files. Html html : load HTML file. Json json : load Json file through Drupal Json serializer. Markdown md : use LaodMarkdown class (using erusev/parsedown , https://github.com/erusev/parsedown ) to load Markdown content. Text text : load plain Text file. Yaml yaml : load Yaml file through Drupal Yaml serializer.","title":"Handler type type (string)"},{"location":"tutorials/file-profile/#dynamic-handlers","text":"Two dynamic handlers are provided for Documentation: MkDocs mkdocs : provide a light API to display MkDocs ( https://www.mkdocs.org/ ) based documentation in the administration area. Readme readme : extends Markdown type to provide display modules Readme files in the administration area. getDocs() static function from \\Drupal\\xtc\\XtendedContent\\API\\Config provides an example for dynamics handlers: public static function getDocs($module){ $profile = [ type = mkdocs , abs_path = false, module = $module, path = help/mkdocs.yml , ]; $content = self::getFromProfile($profile); if(!empty($content) is_array($content)) { return $content; } return h2 Documentation needs to be created. /h2 p Documentation follows b a href= https://www.mkdocs.org/ target= _blank mkdocs /a /b standards. /p ; } Config::getFromProfile() needs to be used in that case. This function directly trigger a get() ; public static function getFromProfile($profile){ return self::getHandler($profile[ type ]) - setProfile($profile) - setOptions() - get(); ; } If for any reason, an action needs to be done before the get(), the Config::getHandlerFromProfile() can be prefered: public static function getHandlerFromProfile($profile){ return self::getHandler($profile[ type ]) - setProfile($profile) - setOptions(); ; }","title":"Dynamic handlers"},{"location":"tutorials/file-profile/#absolute-path-abs_path-boolean","text":"Whether the provided path is absolute or local.","title":"Absolute path abs_path (boolean)"},{"location":"tutorials/file-profile/#module-module-string","text":"Module machinename where the file is expected to be found.","title":"Module module (string)"},{"location":"tutorials/file-profile/#path-path-string","text":"Path from the module root directory.","title":"Path path (string)"},{"location":"tutorials/file-profile/#extending-types-list","text":"Any new File type handler should be based on \\Drupal\\xtcfile\\Plugin\\XtcHandler\\FileBase . Example from the Text type: namespace Drupal\\xtcfile\\Plugin\\XtcHandler; /** * Plugin implementation of the xtc_handler. * * @XtcHandler( * id = text , * label = @Translation( Text File for XTC ), * description = @Translation( Text File for XTC description. ) * ) */ class Text extends FileBase { }","title":"Extending types list"},{"location":"tutorials/guzzle-profile/","text":"Guzzle profile Loading a Guzzle profile To load an Guzzle client as a service, simply provide the profile name, the helper static function Config::getXtcRequestFromProfile() from \\Drupal\\xtc\\XtendedContent\\API\\Config . $profileService = Config::getXtcRequestFromProfile( user_profile ); That does: public static function getXtcRequestFromProfile($name){ $profile = \\Drupal::service( plugin.manager.xtc_profile ) - getDefinition($name) ; $xtcrequest = (New $profile[ service ]($name)); if($xtcrequest instanceof AbstractXtcRequest){ $xtcrequest- setConfigfromPlugins(); } return $xtcrequest; } Config::getXtcRequestFromProfile() returns an instance of AbstractXtcRequest as it is a very high level helper function. When getting a Guzzle profile, we expect the built Client to be using Guzzle - see \\Drupal\\xtcguzzle\\XtendedContent\\Serve\\XtcRequest\\AbstractGuzzleXtcRequest : protected function buildClient(){ $this- client = $this- getGuzzleClient(); $this- client- setXtcConfig($this- config); return $this; } Then expect get() to behave exactly as your usual Guzzle Client . $users = $profileService- get( getUserGroupById , $this- groupId)- getData( array ); As get() function from \\Drupal\\xtc\\XtendedContent\\Serve\\XtcRequest\\AbstractXtcRequest is as transparent as possible: public function get($method, $param = ) { try { $this- client- init($method, $param); $content = $this- client- get(); } catch (RequestException $e) { $content = ; } $this- setData($content); return $this; } Plugin definition This is a Drupal 8 YAML plugin. Yaml file The profiles can be defined in a YAML file that follows this pattern: [module_name].xtc_profiles.yml . The plugin is defined in the Xtended Content ( xtc ) module: xtc/src/PluginManager/XtcProfile/XtcProfilePluginManager.php . Structure A File profile definition looks lake this: user_profile : label : User profile description : type : guzzle server : ldap service : Drupal\\xtcguzzle\\XtendedContent\\Serve\\XtcRequest\\GuzzleXtcRequest method : getUserGroupById label (string) and description (string) are mandatory for any Drupal 8 plugin definition. Handler type type (string) Always use guzzle . Server server (string) Provide the name of the XTC server plugin to use. Service service (string) Provide the name of the XtcRequest class to build the Guzzle Client. Method method (string) Method can be pass to benefit from dynamic functions. Extending available XtcRequest services list Any new XtcRequest service should be based on \\Drupal\\xtcguzzle\\XtendedContent\\Serve\\XtcRequest\\AbstractGuzzleXtcRequest . Example from the GuzzleXtcRequest class: namespace Drupal\\xtcguzzle\\XtendedContent\\Serve\\XtcRequest; class GuzzleXtcRequest extends AbstractGuzzleXtcRequest { }","title":"Guzzle profile"},{"location":"tutorials/guzzle-profile/#guzzle-profile","text":"","title":"Guzzle profile"},{"location":"tutorials/guzzle-profile/#loading-a-guzzle-profile","text":"To load an Guzzle client as a service, simply provide the profile name, the helper static function Config::getXtcRequestFromProfile() from \\Drupal\\xtc\\XtendedContent\\API\\Config . $profileService = Config::getXtcRequestFromProfile( user_profile ); That does: public static function getXtcRequestFromProfile($name){ $profile = \\Drupal::service( plugin.manager.xtc_profile ) - getDefinition($name) ; $xtcrequest = (New $profile[ service ]($name)); if($xtcrequest instanceof AbstractXtcRequest){ $xtcrequest- setConfigfromPlugins(); } return $xtcrequest; } Config::getXtcRequestFromProfile() returns an instance of AbstractXtcRequest as it is a very high level helper function. When getting a Guzzle profile, we expect the built Client to be using Guzzle - see \\Drupal\\xtcguzzle\\XtendedContent\\Serve\\XtcRequest\\AbstractGuzzleXtcRequest : protected function buildClient(){ $this- client = $this- getGuzzleClient(); $this- client- setXtcConfig($this- config); return $this; } Then expect get() to behave exactly as your usual Guzzle Client . $users = $profileService- get( getUserGroupById , $this- groupId)- getData( array ); As get() function from \\Drupal\\xtc\\XtendedContent\\Serve\\XtcRequest\\AbstractXtcRequest is as transparent as possible: public function get($method, $param = ) { try { $this- client- init($method, $param); $content = $this- client- get(); } catch (RequestException $e) { $content = ; } $this- setData($content); return $this; }","title":"Loading a Guzzle profile"},{"location":"tutorials/guzzle-profile/#plugin-definition","text":"This is a Drupal 8 YAML plugin.","title":"Plugin definition"},{"location":"tutorials/guzzle-profile/#yaml-file","text":"The profiles can be defined in a YAML file that follows this pattern: [module_name].xtc_profiles.yml . The plugin is defined in the Xtended Content ( xtc ) module: xtc/src/PluginManager/XtcProfile/XtcProfilePluginManager.php .","title":"Yaml file"},{"location":"tutorials/guzzle-profile/#structure","text":"A File profile definition looks lake this: user_profile : label : User profile description : type : guzzle server : ldap service : Drupal\\xtcguzzle\\XtendedContent\\Serve\\XtcRequest\\GuzzleXtcRequest method : getUserGroupById label (string) and description (string) are mandatory for any Drupal 8 plugin definition.","title":"Structure"},{"location":"tutorials/guzzle-profile/#handler-type-type-string","text":"Always use guzzle .","title":"Handler type type (string)"},{"location":"tutorials/guzzle-profile/#server-server-string","text":"Provide the name of the XTC server plugin to use.","title":"Server server (string)"},{"location":"tutorials/guzzle-profile/#service-service-string","text":"Provide the name of the XtcRequest class to build the Guzzle Client.","title":"Service service (string)"},{"location":"tutorials/guzzle-profile/#method-method-string","text":"Method can be pass to benefit from dynamic functions.","title":"Method method (string)"},{"location":"tutorials/guzzle-profile/#extending-available-xtcrequest-services-list","text":"Any new XtcRequest service should be based on \\Drupal\\xtcguzzle\\XtendedContent\\Serve\\XtcRequest\\AbstractGuzzleXtcRequest . Example from the GuzzleXtcRequest class: namespace Drupal\\xtcguzzle\\XtendedContent\\Serve\\XtcRequest; class GuzzleXtcRequest extends AbstractGuzzleXtcRequest { }","title":"Extending available XtcRequest services list"},{"location":"tutorials/request/","text":"Defining a Request","title":"Defining a Request"},{"location":"tutorials/request/#defining-a-request","text":"","title":"Defining a Request"},{"location":"tutorials/search-block/","text":"Creating a search block","title":"Creating a search block"},{"location":"tutorials/search-block/#creating-a-search-block","text":"","title":"Creating a search block"},{"location":"tutorials/search-display/","text":"Search display","title":"Search display"},{"location":"tutorials/search-display/#search-display","text":"","title":"Search display"},{"location":"tutorials/search-page/","text":"Creating a search page","title":"Creating a search page"},{"location":"tutorials/search-page/#creating-a-search-page","text":"","title":"Creating a search page"},{"location":"tutorials/search-profile/","text":"Search profile","title":"Search profile"},{"location":"tutorials/search-profile/#search-profile","text":"","title":"Search profile"},{"location":"tutorials/server/","text":"Defining a Server Loading a Server profile To load a content, simply provide the profile name to the getFile() static function from the helper class \\Drupal\\xtc\\XtendedContent\\API\\Config . $content = \\Drupal\\xtc\\XtendedContent\\API\\Config::getFile( test_text ); Plugin definition This is a Drupal 8 YAML plugin. Yaml file The profiles can be defined in a YAML file that follows this pattern: [module_name].xtc_profiles.yml . The plugin is defined in the Xtended Content ( xtc ) module: xtc/src/PluginManager/XtcProfile/XtcProfilePluginManager.php . Structure A File profile definition looks lake this: test_text : label : Text file description : type : text abs_path : false module : xtcfile path : example/demo.txt label (string) and description (string) are mandatory for any Drupal 8 plugin definition. Handler type type (string) Available types provided by the XTC File are: Csv csv : use LoadCsv class (based on https://github.com/parsecsv/parsecsv-for-php ) to load Comma-Separated Values files. Html html : load HTML file. Json json : load Json file through Drupal Json serializer. Markdown md : use LaodMarkdown class (using erusev/parsedown , https://github.com/erusev/parsedown ) to load Markdown content. Text text : load plain Text file. Yaml yaml : load Yaml file through Drupal Yaml serializer. Dynamic handlers Two dynamic handlers are provided for Documentation: MkDocs mkdocs : provide a light API to display MkDocs ( https://www.mkdocs.org/ ) based documentation in the administration area. Readme readme : extends Markdown type to provide display modules Readme files in the administration area. getDocs() static function from \\Drupal\\xtc\\XtendedContent\\API\\Config provides an example for dynamics handlers: public static function getDocs($module){ $profile = [ type = mkdocs , abs_path = false, module = $module, path = help/mkdocs.yml , ]; $content = self::getFromProfile($profile); if(!empty($content) is_array($content)) { return $content; } return h2 Documentation needs to be created. /h2 p Documentation follows b a href= https://www.mkdocs.org/ target= _blank mkdocs /a /b standards. /p ; } Config::getFromProfile() needs to be used in that case. This function directly trigger a get() ; public static function getFromProfile($profile){ return self::getHandler($profile[ type ]) - setProfile($profile) - setOptions() - get(); ; } If for any reason, an action needs to be done before the get(), the Config::getHandlerFromProfile() can be prefered: public static function getHandlerFromProfile($profile){ return self::getHandler($profile[ type ]) - setProfile($profile) - setOptions(); ; } Absolute path abs_path (boolean) Whether the provided path is absolute or local. Module module (string) Module machinename where the file is expected to be found. Path path (string) Path from the module root directory. Extending types list Any new File type handler should be based on \\Drupal\\xtcfile\\Plugin\\XtcHandler\\FileBase . Example from the Text type: namespace Drupal\\xtcfile\\Plugin\\XtcHandler; /** * Plugin implementation of the xtc_handler. * * @XtcHandler( * id = text , * label = @Translation( Text File for XTC ), * description = @Translation( Text File for XTC description. ) * ) */ class Text extends FileBase { }","title":"Defining a Server"},{"location":"tutorials/server/#defining-a-server","text":"","title":"Defining a Server"},{"location":"tutorials/server/#loading-a-server-profile","text":"To load a content, simply provide the profile name to the getFile() static function from the helper class \\Drupal\\xtc\\XtendedContent\\API\\Config . $content = \\Drupal\\xtc\\XtendedContent\\API\\Config::getFile( test_text );","title":"Loading a Server profile"},{"location":"tutorials/server/#plugin-definition","text":"This is a Drupal 8 YAML plugin.","title":"Plugin definition"},{"location":"tutorials/server/#yaml-file","text":"The profiles can be defined in a YAML file that follows this pattern: [module_name].xtc_profiles.yml . The plugin is defined in the Xtended Content ( xtc ) module: xtc/src/PluginManager/XtcProfile/XtcProfilePluginManager.php .","title":"Yaml file"},{"location":"tutorials/server/#structure","text":"A File profile definition looks lake this: test_text : label : Text file description : type : text abs_path : false module : xtcfile path : example/demo.txt label (string) and description (string) are mandatory for any Drupal 8 plugin definition.","title":"Structure"},{"location":"tutorials/server/#handler-type-type-string","text":"Available types provided by the XTC File are: Csv csv : use LoadCsv class (based on https://github.com/parsecsv/parsecsv-for-php ) to load Comma-Separated Values files. Html html : load HTML file. Json json : load Json file through Drupal Json serializer. Markdown md : use LaodMarkdown class (using erusev/parsedown , https://github.com/erusev/parsedown ) to load Markdown content. Text text : load plain Text file. Yaml yaml : load Yaml file through Drupal Yaml serializer.","title":"Handler type type (string)"},{"location":"tutorials/server/#dynamic-handlers","text":"Two dynamic handlers are provided for Documentation: MkDocs mkdocs : provide a light API to display MkDocs ( https://www.mkdocs.org/ ) based documentation in the administration area. Readme readme : extends Markdown type to provide display modules Readme files in the administration area. getDocs() static function from \\Drupal\\xtc\\XtendedContent\\API\\Config provides an example for dynamics handlers: public static function getDocs($module){ $profile = [ type = mkdocs , abs_path = false, module = $module, path = help/mkdocs.yml , ]; $content = self::getFromProfile($profile); if(!empty($content) is_array($content)) { return $content; } return h2 Documentation needs to be created. /h2 p Documentation follows b a href= https://www.mkdocs.org/ target= _blank mkdocs /a /b standards. /p ; } Config::getFromProfile() needs to be used in that case. This function directly trigger a get() ; public static function getFromProfile($profile){ return self::getHandler($profile[ type ]) - setProfile($profile) - setOptions() - get(); ; } If for any reason, an action needs to be done before the get(), the Config::getHandlerFromProfile() can be prefered: public static function getHandlerFromProfile($profile){ return self::getHandler($profile[ type ]) - setProfile($profile) - setOptions(); ; }","title":"Dynamic handlers"},{"location":"tutorials/server/#absolute-path-abs_path-boolean","text":"Whether the provided path is absolute or local.","title":"Absolute path abs_path (boolean)"},{"location":"tutorials/server/#module-module-string","text":"Module machinename where the file is expected to be found.","title":"Module module (string)"},{"location":"tutorials/server/#path-path-string","text":"Path from the module root directory.","title":"Path path (string)"},{"location":"tutorials/server/#extending-types-list","text":"Any new File type handler should be based on \\Drupal\\xtcfile\\Plugin\\XtcHandler\\FileBase . Example from the Text type: namespace Drupal\\xtcfile\\Plugin\\XtcHandler; /** * Plugin implementation of the xtc_handler. * * @XtcHandler( * id = text , * label = @Translation( Text File for XTC ), * description = @Translation( Text File for XTC description. ) * ) */ class Text extends FileBase { }","title":"Extending types list"},{"location":"tutorials/source/","text":"Defining a Source","title":"Defining a Source"},{"location":"tutorials/source/#defining-a-source","text":"","title":"Defining a Source"},{"location":"tutorials/tutorials-list/","text":"Tutorial list","title":"Tutorials list"},{"location":"tutorials/tutorials-list/#tutorial-list","text":"","title":"Tutorial list"}]}